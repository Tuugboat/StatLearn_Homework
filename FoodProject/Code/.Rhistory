return(jsonlite::fromJSON(file=ThisFile))
fromJSONrawr <- function(ThisFile){
return(jsonlite::fromJSON(file=ThisFile))
}
Data <- fromJSONrawr(here("Data/FDBRaw/id299.json")) %>% as.data.frame
return(jsonlite::fromJSON(txt=ThisFile))
fromJSONrawr <- function(ThisFile){
return(jsonlite::fromJSON(txt=ThisFile))
}
Data <- fromJSONrawr(here("Data/FDBRaw/id299.json")) %>% as.data.frame
FileList = Sys.glob(here("Data/FDBRaw/id3*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# There is an error at least in id2*.json and id9*.json, there may be more
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id4*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2,
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id5*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4,
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id6*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id7*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id8*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id9*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7, 8
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id1*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7, 8, 9
z=foreach(CurFile=FileList, .combine="rbind") %do% {
print(CurFile)
x=jsonlite::fromJSON(txt=CurFile)
}
FileList = Sys.glob(here("Data/FDBRaw/id*.json"))
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7, 8, 9
z=foreach(CurFile=FileList, .combine="rbind") %do% {
try(jsonlite::fromJSON(txt=CurFile))
}
lapply(FileList, try(jsonlite::fromJSON(txt=CurFile)))
lapply(FileList, try(jsonlite::fromJSON(txt=CurFile), T))
lapply(FileList, function(i) try(jsonlite::fromJSON(txt=CurFile), T))
x = lapply(FileList, function(i) try(jsonlite::fromJSON(txt=CurFile), T))
View(x)
FileList
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7, 8, 9
z=foreach(CurFile=FileList, .combine="rbind") %do% {
try(jsonlite::fromJSON(txt=CurFile), T)
}
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7, 8, 9
z=foreach(CurFile=FileList, .combine="rbind") %do% {
try(jsonlite::fromJSON(txt=CurFile), T) %>% as.data.frame %>% select(entity_id)
}
View(z)
#WELL BUCKO you're going to have to dump all of these into a try() and record which ones fail to find all the errors
# Problem sections: 2, 4, 5, 6, 7, 8, 9
z=foreach(CurFile=FileList, .combine="rbind") %do% {
try(jsonlite::fromJSON(txt=CurFile), T)
}
View(z)
FileList = Sys.glob(here("Data/FDBRaw/id*.json")) %>% arrange()
View(z)
z %>% filter(startsWith(category, "Err")) %>% summarize(n())
z %>% as.data.frame %>% filter(startsWith(category, "Err")) %>% summarize(n())
z %>% as.data.frame %>% filter(!is.string(category)) %>% summarize(n())
z %>% as.data.frame %>% filter(!is.character(category)) %>% summarize(n())
z %>% as.data.frame %>% filter(!is.numeric(entity_id)) %>% summarize(n())
z %>% as.data.frame %>% filter(!is.string(entity_id)) %>% summarize(n())
z %>% as.data.frame %>% filter(!is.character(entity_id)) %>% summarize(n())
View(z)
View(z)
z %>% as.data.frame %>% selectcategry -> categ
z %>% as.data.frame %>% select(category) -> categ
categ
View(Data)
View(categ)
categ %>% group_by(category) %>% summarize(n())
categ %>% group_by(category) %>% summarize(n()) -> summarytable
View(summarytable)
View(z)
View(summarytable)
str(summarytable)
?startsWith
z %>% as.data.frame %>% filter(startsWith(categ, "Error"))
z %>% as.data.frame %>% filter(try(startsWith(categ, "Error"), T))
View(z)
z %>% as.data.frame %>% filter(try(startsWith(entity_id, "Error"), T))
z %>% as.data.frame %>% filter(startsWith(entity_id, "Error"))
z %>% as.data.frame %>% filter(startsWith(as.character(entity_id), "Error"))
z %>% as.data.frame %>% filter(startsWith(as.character(entity_id), "Error")) -> BadFiles
View(BadFiles)
BadFiles <- z %>% as.data.frame %>% filter(startsWith(as.character(entity_id), "Error"))
View(z)
BadFiles <- z %>% left_join(FileList) %>%
as.data.frame %>%
filter(startsWith(as.character(entity_id), "Error"))
BadFiles <- z %>%
as.data.frame %>%
left_join(as.data.frame(FileList)) %>%
filter(startsWith(as.character(entity_id), "Error"))
BadFiles <- z %>%
cbind(FileList) %>%
as.data.frame %>%
filter(startsWith(as.character(entity_id), "Error"))
View(BadFiles)
BadFiles <- z %>%
cbind(FileList) %>%
as.data.frame %>%
filter(startsWith(as.character(entity_id), "Error")) %>%
select(FileList)
View(z)
View(BadFiles)
?tryCatch
Data <- jsonlite::fromJSON(txt=CurFile)(here("Data/FDBRaw/id299.json"))
Data <- jsonlite::fromJSON(txt=here("Data/FDBRaw/id299.json"))
View(Data)
entity=c(Curious = "George", etc="Hello")
entity
cbind(entity, "class"="Goodbye")
rbind(entity, "class"="Goodbye")
entity
addit = c("class"="goodbye")
addit
rbind(entity, addit)
cbind(entity, addit)
cbind(entity, addit)
addit = c(class="goodbye")
addit = c(class="goodbye", forgetit="please")
cbind(entity, addit)
rbind(entity, addit)
entity=c(Curious = "George", etc="Hello") %>% as.data.frame
addit = c(class="goodbye", forgetit="please") %>% as.data.frame
cbind(entity, addit)
rbind(entity, addit)
entity
combined = rbind(entity, addit)
combined
View(combined)
combined = rbind(entity, addit) %>% rownames_to_column(var="CName")
View(combined)
?pivot_wider
View(addit)
pt = pivot_wider(id_cols=CName, values_from = .)
combined = rbind(entity, addit) %>% rownames_to_column(var="CName")
View(combined)
pt = pivot_wider(id_cols="CName", values_from = ".")
FoodMols = read.csv(here("Data/FoodMols_Wide.csv"))
colnames(Clusters)
colnames(FoodMols)
colnames(FoodMols) %>% head
colnames(FoodMols) %>% select(X) %>% head
FoodMols %>% select(X) %>% head
FoodMols %<>% select(-X) %>% column_to_rownames("alias")
FoodMols_NoLab = FoodMols %>% select(-c(X, alias, ID))
FoodMols_NoLab %>% colnames
FoodMols_NoLab %>% colnames %>% head
FoodMols_Labs = FoodMols %>% select(alias, ID)
FoodMols_NoLab = FoodMols %>% select(-c(X, alias, ID)) %>% scale(center=T, scale=F)
FoodMols_NoLab = FoodMols %>% select(-c(X, alias, ID)) %>% scale(center=T, scale=F)
# Calc and write the gap stat. This should only be done once, analysis should happen on FoodMols_GapStat.RDS
clusGap(x=FoodMols_NoLab, FUNcluster=kmeans, K.max=50, B=100, nstart=50) %>%
saveRDS(here("Data/FoodMols_GapStat.RDS"))
