# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
mutate(rowwise(row_number(), profile = str_c(unique(unlist(str_split(profile, ", "))), collapse=", ")))
?across
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
mutate(across(profile, { str_c(unique(unlist(str_split(., ", "))), collapse=", ") }))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
mutate(across(c(profile), { str_c(unique(unlist(str_split(., ", "))), collapse=", ") }))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
mutate(across(c("profile"), { str_c(unique(unlist(str_split(., ", "))), collapse=", ") }))
?colwise
?across
?rowwise
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
mutate(rowwise(c(PCID, More), str_c(unique(unlist(str_split(profile, ", "))), collapse=", ")))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
mutate(rowwise(c(PCID, More), { str_c(unique(unlist(str_split(.x, ", "))), collapse=", ")} ))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More), mutate(str_c(unique(unlist(str_split(profile, ", "))), collapse=", ")))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More), mutate(profile="Hello!"))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More), str_c(unique(unlist(str_split(profile, ", "))), collapse=", "))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More), {str_c(unique(unlist(str_split(.x, ", "))), collapse=", ")})
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More), {str_c(unique(unlist(str_split(., ", "))), collapse=", ")})
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More)) %>%mutate(str_c(unique(unlist(str_split(., ", "))), collapse=", "))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More)) %>%mutate(str_c(unique(unlist(str_split(profile, ", "))), collapse=", "))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>% filter(PCID=="PC4") %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
# Again with the LHS->RHS->LHS swap for piping
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
ungroup %>%
rowwise(c(PCID, More)) %>% mutate(profile=str_c(unique(unlist(str_split(profile, ", "))), collapse=", "))
#################################################################################
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
ungroup %>% #prep for rowwise()
# Again with the LHS->RHS->LHS swap for piping
# worse yet, it's inside of a rowwise()
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
rowwise(c(PCID, More)) %>% mutate(profile=str_c(unique(unlist(str_split(profile, ", "))), collapse=", ")) %>%
ungroup() %>% #Drop rowwise
# Convert Boolean to a string (for readability in the table)
mutate(More = ifelse(More, "More.Flavor", "Less.Flavor")) %>%
# A final pivot wider to return everything to a more/less format
# Implicitly, the id columns are the PCIDs
pivot_wider(names_from = "More", values_from = "profile") %>%
# Fill in NAs
mutate(across(everything(), ~ replace(., is.na(.), "None")))
LoadingPalette
# Convoluted transformations to get the flavor profiles
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
ungroup %>% #prep for rowwise()
# Again with the LHS->RHS->LHS swap for piping
# worse yet, it's inside of a rowwise()
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
rowwise(c(PCID, More)) %>% mutate(profile=str_c(unique(unlist(str_split(profile, ", "))), collapse=", ")) %>%
ungroup() %>% #Drop rowwise
# Convert Boolean to a string (for readability in the table)
mutate(More = ifelse(More, "More.Flavor", "Less.Flavor")) %>%
# A final pivot wider to return everything to a more/less format
# Implicitly, the id columns are the PCIDs
pivot_wider(names_from = "More", values_from = "profile") %>%
# Fill in NAs
mutate(across(everything(), ~ replace(., is.na(.), "None")))
LoadingFood <- FoodMols_Labels %>% cbind(FoodPC$x) %>%
select(-ID) %>%
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "Score") %>%
group_by(PCID) %>%
# Grab top and bottom 5 of each
{ rbind(slice_max(., order_by = Score, n=5, with_ties=F), slice_min(., order_by = Score, n=5, with_ties=F)) } %>%
# Boolean for positive values
mutate(More=Score>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse names
summarize(across(alias, str_c, collapse=", ")) %>%
# Convert Boolean to a string (for readability in the table)
mutate(More = ifelse(More, "More.Food", "Less.Food")) %>%
# A final pivot wider to return everything to a more/less format
# Implicitly, the id columns are the PCIDs
pivot_wider(names_from = "More", values_from = "alias") %>%
# Fill in NAs
mutate(across(everything(), ~ replace(., is.na(.), "None")))
left_join(LoadingPalette, LoadingFood, by="PCID") %>% mutate(PCID = str_remove_all(PCID, "PC")) %>% mutate(PCID = as.numeric(PCID)) %>% arrange(PCID) %>% kable()
# Convoluted transformations to get the flavor profiles
# Convoluted transformations to get the flavor profiles
LoadingPalette = FoodPC$rotation %>% as.data.frame %>%
#Slap common names to a column and join with the compound summaries
rownames_to_column("common_name") %>%
left_join(CompSum, by="common_name") %>%
unique %>%
#Now we are going to pivot longer so that we can get the important compounds
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "PCScale") %>%
group_by(PCID) %>%
# We only care about the first 10 components for each
slice_max(order_by = abs(PCScale), n=10, with_ties=F) %>%
# Boolean for positive values
mutate(More=PCScale>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse the flavor profiles to a string
summarize(across(profile, str_c, collapse=", ")) %>%
ungroup %>% #prep for rowwise()
# Again with the LHS->RHS->LHS swap for piping
# worse yet, it's inside of a rowwise()
# Here we convert the profile to a list, grab unique values, then collapse back to a string
# unlist is what makes unique() work on the vector
# There are better ways to do this
rowwise(c(PCID, More)) %>% mutate(profile=str_c(unique(unlist(str_split(profile, ", "))), collapse=", ")) %>%
ungroup() %>% #Drop rowwise
# Convert Boolean to a string (for readability in the table)
mutate(More = ifelse(More, "More.Flavor", "Less.Flavor")) %>%
# A final pivot wider to return everything to a more/less format
# Implicitly, the id columns are the PCIDs
pivot_wider(names_from = "More", values_from = "profile") %>%
# Fill in NAs
mutate(across(everything(), ~ replace(., is.na(.), "None")))
LoadingFood <- FoodMols_Labels %>% cbind(FoodPC$x) %>%
select(-ID) %>%
pivot_longer(cols=starts_with("PC"),  names_to="PCID", values_to = "Score") %>%
group_by(PCID) %>%
# Grab top and bottom 5 of each
{ rbind(slice_max(., order_by = Score, n=5, with_ties=F), slice_min(., order_by = Score, n=5, with_ties=F)) } %>%
# Boolean for positive values
mutate(More=Score>0) %>%
ungroup() %>%
# Now we split into groups by the components AND their sign
group_by(PCID, More) %>%
# Collapse names
summarize(across(alias, str_c, collapse=", ")) %>%
# Convert Boolean to a string (for readability in the table)
mutate(More = ifelse(More, "More.Food", "Less.Food")) %>%
# A final pivot wider to return everything to a more/less format
# Implicitly, the id columns are the PCIDs
pivot_wider(names_from = "More", values_from = "alias") %>%
# Fill in NAs
mutate(across(everything(), ~ replace(., is.na(.), "None")))
left_join(LoadingPalette, LoadingFood, by="PCID") %>% mutate(PCID = str_remove_all(PCID, "PC")) %>% mutate(PCID = as.numeric(PCID)) %>% arrange(PCID) %>% kable(col.names = c("PC", "Less Flavor", "More Flavor", "Low-scored Foods", "High-scored Foods"))
FoodMols_Labels %>% cbind(FoodPC$x) %>%
select(-ID) %>% write.csv(here("Data/PCA_FoodScores.csv"))
FoodMols_Labels %>% cbind(FoodPC$x) %>%
select(-ID) %>% write.csv(here("Data/PCA_FoodScores.csv"))
ClustResult %>%
left_join(ComplexityTable, by="alias") %>%
select(alias, CID) %>%
write.csv(here("Data/Cluster_FoodMemberships.csv"))
